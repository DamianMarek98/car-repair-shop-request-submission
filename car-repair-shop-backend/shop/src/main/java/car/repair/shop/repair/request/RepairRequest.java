package car.repair.shop.repair.request;

import car.repair.shop.commons.dynamodb.converter.LocalDateTimeConverter;
import car.repair.shop.repair.request.controller.dto.SubmitRepairRequestDto;
import car.repair.shop.repair.request.exception.RepairRequestMissingCarInformationException;
import car.repair.shop.repair.request.exception.RepairRequestRodoException;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;
import java.util.List;

@Getter(AccessLevel.PUBLIC)
@Setter(AccessLevel.PUBLIC)
@DynamoDBTable(tableName = "repair_request")
public class RepairRequest {
    static final String DUMMY_PARTITION_KEY = "DUMMY";
    @DynamoDBHashKey
    @DynamoDBAutoGeneratedKey
    private String id;

    @DynamoDBIndexHashKey(attributeName = "dummyPartitionKey", globalSecondaryIndexName = "SubmittedAtIndex")
    private String dummyPartitionKey = DUMMY_PARTITION_KEY;

    @DynamoDBAttribute(attributeName = "vin")
    private String vin;

    @DynamoDBAttribute(attributeName = "plate_number")
    private String plateNumber;

    @DynamoDBAttribute(attributeName = "issue_description")
    private String issueDescription;

    @DynamoDBAttribute(attributeName = "submitter_first_name")
    private String submitterFirstName;

    @DynamoDBAttribute(attributeName = "submitter_last_name")
    private String submitterLastName;

    @DynamoDBAttribute(attributeName = "email")
    private String email;

    @DynamoDBAttribute(attributeName = "phone_number")
    private String phoneNumber;

    @DynamoDBAttribute(attributeName = "asap")
    private boolean asap;

    @DynamoDBAttribute(attributeName = "preferred_visit_windows")
    @DynamoDBTypeConverted(converter = PreferredVisitWindowConverter.class)
    private List<PreferredVisitWindow> preferredVisitWindows;

    @DynamoDBIndexRangeKey(attributeName = "submittedAt", globalSecondaryIndexName = "SubmittedAtIndex")
    @DynamoDBTypeConverted(converter = LocalDateTimeConverter.class)
    private LocalDateTime submittedAt;

    @DynamoDBAttribute(attributeName = "handled_at")
    @DynamoDBTypeConverted(converter = LocalDateTimeConverter.class)
    private LocalDateTime handledAt;

    @DynamoDBAttribute(attributeName = "status_value")
    @DynamoDBTypeConvertedEnum
    private RepairRequestStatus status;

    @DynamoDBAttribute(attributeName = "rodo")
    private boolean rodo;

    static RepairRequest from(SubmitRepairRequestDto submitRepairRequestDto) {
        if (!submitRepairRequestDto.rodo()) {
            throw new RepairRequestRodoException();
        } else if (submitRepairRequestDto.vin() == null && submitRepairRequestDto.plateNumber() == null) {
            throw new RepairRequestMissingCarInformationException();
        }

        var repairRequest = new RepairRequest();
        repairRequest.vin = submitRepairRequestDto.vin();
        repairRequest.plateNumber = submitRepairRequestDto.plateNumber();
        repairRequest.issueDescription = submitRepairRequestDto.issueDescription();
        repairRequest.submitterFirstName = submitRepairRequestDto.firstName();
        repairRequest.submitterLastName = submitRepairRequestDto.lastName();
        repairRequest.email = submitRepairRequestDto.email();
        repairRequest.phoneNumber = submitRepairRequestDto.phoneNumber();
        repairRequest.submittedAt = LocalDateTime.now();
        repairRequest.asap = submitRepairRequestDto.asap();
        repairRequest.rodo = submitRepairRequestDto.rodo();
        repairRequest.preferredVisitWindows = submitRepairRequestDto.timeSlots() == null ? List.of() :
                submitRepairRequestDto.timeSlots()
                        .stream()
                        .map(PreferredVisitWindow::from)
                        .toList();
        repairRequest.status = RepairRequestStatus.NEW;
        return repairRequest;
    }

    protected void markAsHandled() {
        handledAt = LocalDateTime.now();
        status = RepairRequestStatus.HANDLED;
    }

    protected void maskAsAppointmentMade() {
        status = RepairRequestStatus.APPOINTMENT_MADE;
    }
}
